{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
import { AccountMeta, isSigner, Pda, publicKey, PublicKey, Signer } from '@metaplex-foundation/umi';

/**
 * Transforms the given object such that the given keys are optional.
 * @internal
 */
export type PickPartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;

/**
 * Defines an instruction account to resolve.
 * @internal
 */
export type ResolvedAccount = {
  isWritable: boolean;
  value: PublicKey | Pda | Signer | undefined;
}

/**
 * Defines a set of instruction account to resolve with their indices.
 * @internal
 */
export type ResolvedAccountsWithIndices = Record<string, ResolvedAccount & { index: number }>;

/**
 * Add instruction accounts to the given list of keys and signers.
 * @internal
 */
export function addAccountMetas(
  keys: AccountMeta[],
  signers: Signer[],
  accounts: ResolvedAccount[],
  isOptionalStrategy: 'omitted' | 'programId',
  programId: PublicKey,
): void {
  accounts.forEach(account => {
    if (!account.value) {
      if (isOptionalStrategy === 'omitted') return;
      keys.push({ pubkey: programId, isSigner: false, isWritable: false });
      return;
    }

    if (isSigner(account.value)) {
      signers.push(account.value);
    }
    keys.push({
      pubkey: publicKey(account.value, false),
      isSigner: isSigner(account.value),
      isWritable: account.isWritable,
    });
  });
};
{% endblock %}
